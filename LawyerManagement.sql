--DATABASE PROJECT ON LAWYER APPOINTMENT MANAGEMENT SYSTEM 
--BY MD SHANJID AREFIN (ROLL: 1807104)


-- DELETING THE TABLES IF THEY EXIST

DROP TABLE APPOINTMENT;
DROP TABLE CHAMBER;
DROP TABLE LAWYER;
DROP TABLE CLIENT;



-- CREATION OF LAWYER TABLE
CREATE TABLE LAWYER(
    LAWYER_ID            INTEGER NOT NULL,
    NAME                 VARCHAR(30),
    COURT                VARCHAR(30),
    EMAIL                VARCHAR(50),
    PHONE                VARCHAR(20),
    CATEG                VARCHAR(20),
    FEE                  NUMBER(7)
);

-- MAKING THE PRIMARY KEY OUTSIDE TABLE CREATION 
ALTER TABLE LAWYER ADD CONSTRAINT LAWYER_PK PRIMARY KEY(LAWYER_ID);

-- CHANGING THE NAME OF THE EXISTED COLUMN BY USING ALTER
ALTER TABLE LAWYER RENAME COLUMN CATEG TO CATEGORY;



--CREATION OF CHAMBER TABLE
CREATE TABLE CHAMBER(
    CHAMBER_ID           NUMBER(5) NOT NULL,
    AREA                 VARCHAR(20),
    STREET               VARCHAR(30),
    LAWYER_ID            NUMBER(5) NOT NULL,
    PRIMARY KEY (CHAMBER_ID),
    FOREIGN KEY (LAWYER_ID) REFERENCES LAWYER(LAWYER_ID)
);



--CREATION OF CLIENT TABLE
CREATE TABLE CLIENT(
    CLIENT_ID            NUMBER(5) NOT NULL,
    NAME                 VARCHAR(30) NOT NULL,
    PHONE                VARCHAR(20),
    AGE                  NUMBER(3),
    CONSTRAINT CLIENT_PK PRIMARY KEY (CLIENT_ID)
);

--Modification using alter
ALTER TABLE CLIENT MODIFY AGE NUMBER(3) check(AGE>17);

--Dropping and Adding CONSTRAINT into TABLE CLIENT
ALTER TABLE CLIENT DROP CONSTRAINT CLIENT_PK;
ALTER TABLE CLIENT ADD  CONSTRAINT CLIENT_PK PRIMARY KEY(CLIENT_ID);



--CREATION OF APPOINTMENT TABLE
CREATE TABLE APPOINTMENT
(
    APPOINTMENT_ID       INTEGER NOT NULL,
    LAWYER_ID            NUMBER(5) NOT NULL,
    CLIENT_ID            NUMBER(5) NOT NULL,
    APPOINTMENT_DATE     DATE,
    PRIMARY KEY (APPOINTMENT_ID),
    FOREIGN KEY (LAWYER_ID) REFERENCES LAWYER(LAWYER_ID) ON DELETE CASCADE,
    FOREIGN KEY (CLIENT_ID) REFERENCES CLIENT(CLIENT_ID) ON DELETE CASCADE
);



--Triggering for Insertion and Update for CLIENT AGE


CREATE OR REPLACE TRIGGER AgeChecking BEFORE INSERT OR UPDATE ON CLIENT
FOR EACH ROW
DECLARE
	minAge CLIENT.AGE%TYPE := 17;
BEGIN
	IF :new.AGE<minAGE THEN
	 	RAISE_APPLICATION_ERROR(-20000,'NOT ALLOWED TO CREATE AN ACCOUNT');
	END IF;
END;
/

-- DESCRIBE TABLE
DESCRIBE APPOINTMENT;
DESCRIBE CHAMBER;
DESCRIBE LAWYER;
DESCRIBE CLIENT;



--VALUE INSERTION OF LAWYER TABLE

INSERT INTO LAWYER VALUES (100,'MR HABIB','JUDGE COURT',NULL,'01941233774','DIVORCE',1000);
INSERT INTO LAWYER VALUES (101,'HASAN ALI','HIGH COURT',NULL,'01735671123','CRIMINAL',2000);
INSERT INTO LAWYER VALUES (102,'SHIHAB','JUDGE COURT',NULL,'01312566773','DIVORCE',1500);
INSERT INTO LAWYER VALUES (103,'MR KAYSAR','SUPREME COURT',NULL,'01956342567','REAL ESTATE',3000);
INSERT INTO LAWYER VALUES (104,'RAM GOPAL','HIGH COURT',NULL,'01334789067','CORPORATE',1000);
INSERT INTO LAWYER VALUES (105,'FARHAN SAMJI','JUDGE COURT',NULL,'01745322123','CRIMINAL',2000);
INSERT INTO LAWYER VALUES (106,'SAZID BIN HAYAT','SUPREME COURT',NULL,'01980567843','CRIMINAL',5000);
INSERT INTO LAWYER VALUES (107,'MAZHARUL ISLAM','HIGH COURT',NULL,'01345673289','FAMILY',1200);
INSERT INTO LAWYER VALUES (108,'PAPON BIN LADEN','HIGH COURT',NULL,'01689034522','LABOUR LAWYER',1000);
INSERT INTO LAWYER VALUES (109,'KOWSHIK','JUDGE COURT',NULL,'01711234567','CORPORATE',2200);



--VALUE INSERTION OF CHAMBER TABLE

INSERT INTO CHAMBER VALUES (1,'DHAKA','MIRPUR 2A',100);
INSERT INTO CHAMBER VALUES (2,'SYLHET','MOULABHIBAZAR HAT',101);
INSERT INTO CHAMBER VALUES (3,'KHULNA','SONADANGA',102);
INSERT INTO CHAMBER VALUES (4,'DHAKA','GULISTHAN',103);
INSERT INTO CHAMBER VALUES (5,'BARISAL','BARISAL SADAR',104);
INSERT INTO CHAMBER VALUES (6,'KHULNA','DUCK BANGLA',105);
INSERT INTO CHAMBER VALUES (7,'KHULNA','SHIBBARI',106);



--VALUE INSERTION OF CLIENT TABLE

INSERT INTO CLIENT VALUES (1000,'JALIL','54522',19);
INSERT INTO CLIENT VALUES (1001,'PAPON','564522',30);
INSERT INTO CLIENT VALUES (1002,'KAMRUNNAHAR','64522',35);
INSERT INTO CLIENT VALUES (1003,'RAHEMA BANU','155222',49);
INSERT INTO CLIENT VALUES (1004,'SHAMSUR','26622',61);
INSERT INTO CLIENT VALUES (1005,'UDAY','26667',45);
INSERT INTO CLIENT VALUES (1006,'RIFAT','345677',38);
INSERT INTO CLIENT VALUES (1007,'SAIMON','165934',22);



--VALUE INSERTION OF APPOINTMNET TABLE

INSERT INTO APPOINTMENT VALUES (11,100,1000,'22-AUG-2022');
INSERT INTO APPOINTMENT VALUES (12,100,1001,'22-AUG-2022');
INSERT INTO APPOINTMENT VALUES (13,103,1002,'23-AUG-2022');
INSERT INTO APPOINTMENT VALUES (14,104,1003,'23-AUG-2022');
INSERT INTO APPOINTMENT VALUES (15,105,1004,'23-AUG-2022');
INSERT INTO APPOINTMENT VALUES (16,105,1005,'26-AUG-2022');
INSERT INTO APPOINTMENT VALUES (17,106,1006,'27-AUG-2022');


DROP TRIGGER AgeChecking;



--Select operation of the tables

SELECT * FROM LAWYER;
SELECT * FROM CHAMBER;
SELECT * FROM CLIENT;
SELECT * FROM APPOINTMENT;





--Different types of operation

SELECT DISTINCT(CATEGORY) AS DISTINCT_CATEGORY FROM LAWYER;

SELECT COURT AS COURT_NAME FROM LAWYER WHERE NAME LIKE '%HA%';

SELECT LAWYER_ID, NAME, CATEGORY FROM LAWYER ORDER BY LAWYER_ID ASC;

SELECT LAWYER_ID, NAME, CATEGORY FROM LAWYER ORDER BY LAWYER_ID DESC;





--The lawyer whose fees is between 2000 and 3000
SELECT LAWYER_ID, NAME FROM LAWYER WHERE FEE BETWEEN 2000 AND 3000;

--The lawyer whose fees is NOT between 2000 and 3000
SELECT LAWYER_ID, NAME FROM LAWYER WHERE FEE NOT BETWEEN 2000 AND 3000;

-- THE LAWYER WHOSE CHAMBER IS LOCATED IN 'DHAKA' BY NESTED QUERY
SELECT LAWYER_ID, NAME FROM LAWYER WHERE LAWYER_ID IN (SELECT LAWYER_ID FROM CHAMBER WHERE AREA = 'DHAKA');

-- THE LAWYER WHOSE CHAMBER IS LOCATED IN 'DHAKA' OR 'KHULNA' BY NESTED QUERY
SELECT LAWYER_ID, NAME FROM LAWYER WHERE LAWYER_ID IN (SELECT LAWYER_ID FROM CHAMBER WHERE AREA = 'DHAKA' OR AREA='KHULNA');


-- FIND THE LAWYER WHO CHARGES HIGHEST FEES BY AGGREGATE FUNCTION
SELECT NAME, FEE FROM LAWYER WHERE FEE IN (SELECT MAX(FEE) FROM LAWYER);

-- FIND THE LAWYER WHO CHARGES LOWEST FEES BY AGGREGATE FUNCTION
SELECT NAME, FEE FROM LAWYER WHERE FEE IN (SELECT MIN(FEE) FROM LAWYER);

-- FIND THE TOTAL NUMBER OF CHAMBERS LOCATED IN DHAKA BY AGGREGATE FUNCTION AND GROUP BY AND HAVING FUNCTION
SELECT COUNT(AREA) AS NUMBER_OF_CHAMBER, AREA FROM CHAMBER GROUP BY AREA HAVING AREA='DHAKA';

-- FIND THE LAWYERS GROUPED BY THEIR TYPE
SELECT COUNT(LAWYER_ID) AS NUMBER_OF_LAWYER, CATEGORY FROM LAWYER GROUP BY CATEGORY;

--All the LAWYER'S and CLIENT'S DETAILS using UNION ALL
SELECT NAME, PHONE FROM LAWYER UNION ALL SELECT NAME, PHONE FROM CLIENT;


--All the LAWYER'S and CLIENT'S DETAILS using UNION

SELECT NAME, PHONE FROM LAWYER UNION SELECT NAME, PHONE FROM CLIENT;

-- LAWYER_ID WHO HAVE APPOINTMENTS BY USING INTERSECT

SELECT LAWYER_ID FROM LAWYER INTERSECT SELECT LAWYER_ID FROM APPOINTMENT;


--All Appointment date of each CLIENT under the LAWYER
SELECT L.NAME AS LAWYER, C.NAME AS CLIENT, A.APPOINTMENT_DATE AS AppDate FROM LAWYER L,CLIENT C,APPOINTMENT A WHERE L.LAWYER_ID=A.LAWYER_ID AND A.CLIENT_ID=C.CLIENT_ID;



-- FIND THE LAWYER WHO ARE LOCATED IN KHULNA WITH LOWEST FEE ASCENDING ORDER BY USING JOIN
SELECT NAME, FEE FROM LAWYER JOIN CHAMBER ON LAWYER.LAWYER_ID = CHAMBER.LAWYER_ID WHERE AREA='KHULNA' ORDER BY FEE ASC;

-- FIND THE LAWYER WHO ARE LOCATED IN DHAKA WITH HIGHEST FEE DESCENDING ORDER BY USING NATURAL JOIN
SELECT NAME, FEE FROM LAWYER NATURAL JOIN CHAMBER WHERE AREA='DHAKA' ORDER BY FEE DESC;

--LAWYER CHAMBER DESCRIPTION by INNER JOIN same as JOIN
SELECT L.NAME, L.CATEGORY, C.AREA, C.STREET FROM LAWYER L INNER JOIN CHAMBER C ON L.LAWYER_ID=C.LAWYER_ID;

--LAWYER CHAMBER DESCRIPTION by LEFT OUTER JOIN
SELECT L.NAME, L.CATEGORY, C.AREA, C.STREET FROM LAWYER L LEFT OUTER JOIN CHAMBER C ON L.LAWYER_ID=C.LAWYER_ID;

--LAWYER CHAMBER DESCRIPTION by RIGHT OUTER JOIN
SELECT L.NAME, L.CATEGORY, C.AREA, C.STREET FROM LAWYER L RIGHT OUTER JOIN CHAMBER C ON L.LAWYER_ID=C.LAWYER_ID;

--LAWYER CHAMBER DESCRIPTION by FULL OUTER JOIN
SELECT L.NAME, L.CATEGORY, C.AREA, C.STREET FROM LAWYER L FULL OUTER JOIN CHAMBER C ON L.LAWYER_ID=C.LAWYER_ID;



-- SHOWING THE DISCOUNT ON FEES OF APPOINTMENT ON EID DAY USING PL/SQL
SET SERVEROUTPUT ON
DECLARE
    APPOINTMENT_FEE LAWYER.FEE%TYPE;
    DISCOUNTED_PRICE LAWYER.FEE%TYPE;
    APP_ID APPOINTMENT.APPOINTMENT_ID%TYPE;
BEGIN
    APP_ID := 13;
    SELECT LAWYER.FEE INTO APPOINTMENT_FEE FROM APPOINTMENT NATURAL JOIN LAWYER WHERE APPOINTMENT.APPOINTMENT_ID = APP_ID;
    IF(APPOINTMENT_FEE<1000) THEN DISCOUNTED_PRICE := APPOINTMENT_FEE;
    ELSE DISCOUNTED_PRICE := APPOINTMENT_FEE - (APPOINTMENT_FEE*0.5);
    END IF;
    DBMS_OUTPUT.PUT_LINE('FOR APPOINTMENT: '||APP_ID||' APPOINTMENT FEE: '||APPOINTMENT_FEE||' DISCOUNTED FEE: '||DISCOUNTED_PRICE);
    EXCEPTION WHEN OTHERS THEN DBMS_OUTPUT.PUT_LINE(SQLERRM);
END;
/


--SHOWING DETAILS OF CRIMINAL LAWYER USING CURSOR
SET SERVEROUTPUT ON
DECLARE
    CURSOR CRIMINAL_CURSOR IS SELECT NAME, COURT, FEE FROM LAWYER WHERE CATEGORY = 'CRIMINAL';
    ACCESS CRIMINAL_CURSOR%ROWTYPE;
BEGIN
    OPEN CRIMINAL_CURSOR;
    LOOP
        FETCH CRIMINAL_CURSOR INTO ACCESS;
        EXIT WHEN CRIMINAL_CURSOR%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('LAWYER NAME: '|| ACCESS.NAME || ' COURT: '|| ACCESS.COURT || ' FEE: '|| ACCESS.FEE);
    END LOOP;
    CLOSE CRIMINAL_CURSOR;
END;
/

--Insertion into APPOINTMENT table using PROCEDURE

CREATE OR REPLACE PROCEDURE InsertIntoAppointment(APPID APPOINTMENT.APPOINTMENT_ID%TYPE, LWYR LAWYER.LAWYER_ID%TYPE, CLNT CLIENT.CLIENT_ID%TYPE, APPDATE APPOINTMENT.APPOINTMENT_DATE%type) IS
BEGIN
	INSERT INTO APPOINTMENT VALUES(APPID, LWYR , CLNT, APPDATE);
	commit;
END InsertIntoAppointment;
/


--Calling the PROCEDURE for Inserting into APPOINTMENT

SET SERVEROUTPUT ON
BEGIN
	InsertIntoAppointment(21,105,1003,'25-JUL-22');
END;
/

SELECT * FROM APPOINTMENT;




-- FINDING TOTAL NUMBER OF APPOINTMENT ON A PARTICULAR DATE USING FUNCTION

CREATE OR REPLACE FUNCTION TOTALAPP(APP_DATE APPOINTMENT.APPOINTMENT_DATE%type) RETURN NUMBER IS
	APP_NO APPOINTMENT.APPOINTMENT_ID%type;
BEGIN
	SELECT COUNT(APPOINTMENT_ID) INTO APP_NO FROM APPOINTMENT WHERE APPOINTMENT_DATE=APP_DATE;
	RETURN APP_NO;
END TOTALAPP;
/


--Calling the FUNCTION for CALCULATING TOTAL NUMBER OF APPOINTMENT

SET SERVEROUTPUT ON
DECLARE
    APPOINT_DATE APPOINTMENT.APPOINTMENT_DATE%TYPE;
BEGIN
    APPOINT_DATE := '22-AUG-2022';
	DBMS_OUTPUT.PUT_LINE('TOTAL APPOINTMENT ON ' ||APPOINT_DATE ||' is : '||TOTALAPP(APPOINT_DATE));
END;
/


--TRANSACTION MANAGEMENT (ROLLBACK, SAVEPOINT)

SELECT * FROM APPOINTMENT;
DELETE FROM APPOINTMENT;
SELECT * FROM APPOINTMENT;
ROLLBACK;
SELECT * FROM APPOINTMENT;

INSERT INTO APPOINTMENT VALUES(31, 106, 1006, '01-JUL-2022');
SAVEPOINT INSERTION1;
INSERT INTO APPOINTMENT VALUES(32, 104, 1001, '02-JUL-2022');
SAVEPOINT INSERTION2;

SELECT * FROM APPOINTMENT;
ROLLBACK TO INSERTION1;
SELECT * FROM APPOINTMENT;

-- MAKING APPOINTMENT DATE 2 MONTHS LATER

SELECT APPOINTMENT_ID, LAWYER_ID, CLIENT_ID, ADD_MONTHS(APPOINTMENT_DATE,2) AS TWO_MONTHS_EXTENSION FROM APPOINTMENT;

-- VIEW (CREATE, UPDATE, DELETE, DROP)

CREATE VIEW CLIENT_VIEW AS SELECT CLIENT_ID, NAME, PHONE FROM CLIENT;
SELECT * FROM CLIENT_VIEW;

UPDATE CLIENT_VIEW SET NAME = 'ABIR' WHERE CLIENT_ID = 1004;
SELECT * FROM CLIENT_VIEW;

DELETE FROM CLIENT_VIEW WHERE CLIENT_ID = 1007;
SELECT * FROM CLIENT_VIEW;

DROP VIEW CLIENT_VIEW;

SELECT CLIENT_ID, NAME, PHONE FROM CLIENT;


-- END OF PROJECT --



insert into branch values('A','Khulna');
insert into branch values('B','Dhaka');
insert into branch values('C','CTG');

insert into account values(1,'A',1000);
insert into account values(2,'A',2000);
insert into account values(3,'B',1010);
insert into account values(4,'B',2000);
insert into account values(5,'C',1030);

select branch_name, avg(balance) from account group by avg(balance);

update account set balance = balance * 1.06 where balance>=2000;
update account set balance = balance * 1.05 where balance<2000;

drop table result;

create table result(
    roll INTEGER PRIMARY key,
    sub1 number(20),
    sub2 number(20),
    sub3 number(20),
    gp1 number(2),
    gp2 number(2),
    gp3 number(2),
    cgpa number(2)
);

set SERVEROUTPUT ON
DECLARE
    subject1 result.sub1%type;
    subject2 result.sub2%type;
    subject3 result.sub3%type;
    i INTEGER;
    
BEGIN
    for i in 1 .. 5
    LOOP
    subject1:= &number1;
    subject2:= &number2;
    subject3:= &number3;
    insert into result values(i,subject1,subject2,subject3,3,2,4,3);
    end loop;
END;
/

select * from result;
